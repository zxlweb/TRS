/**
 * @fileOverview 统一HTTP网络请求父对象
 *               产出Promise对象
 *               自动解析JSON数据，服务器返回的数据结构顶层为{code: int(0为成功，其余为错误码), data/error}
 *               附带桩方法
 * @author Max
 **/
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var URL = require("url");
var REQUEST = (function () {
    function REQUEST(param, protocol, dataFlagResolver) {
        this.hostname = param.hostname;
        this.port = param.port;
        this.stubHostname = param.stubHostname;
        this.stubPort = param.stubPort;
        this.protocol = protocol;
        this.dataFlagResolver = dataFlagResolver;
        this.params = {};
    }
    REQUEST.prototype.get = function (url, raw) {
        var urlObj = URL.parse(encodeURI(url));
        var query = '';
        for (var i in this.params) {
            query += i + "=" + this.params[i] + "&";
        }
        query = query.substr(0, query.length - 1);
        if (query !== '') {
            urlObj.search = urlObj.search ? urlObj.search + "&" + query : "?" + query;
        }
        return this.getPromise(this.urlFilter(URL.format(urlObj)), raw);
    };
    REQUEST.prototype.getStub = function (url) {
        return this.getPromise(this.urlStubFilter(encodeURI(url)));
    };
    REQUEST.prototype.post = function (url, content, options, raw) {
        for (var i in this.params) {
            content[i] = this.params[i];
        }
        return this.postPromise(this.urlFilter(encodeURI(url)), content, options, raw);
    };
    REQUEST.prototype.postStub = function (url, content) {
        return this.postPromise(this.urlStubFilter(encodeURI(url)), content);
    };
    REQUEST.prototype.setParam = function (key, value) {
        this.params[key] = value;
    };
    REQUEST.prototype.urlFilter = function (url) {
        var result = url;
        var urlObj = URL.parse(url);
        if (urlObj.hostname === null && urlObj.port === null) {
            urlObj.hostname = this.hostname;
            urlObj.port = this.port;
            urlObj.protocol = this.protocol;
            urlObj.slashes = true;
            result = URL.format(urlObj);
        }
        return result;
    };
    REQUEST.prototype.urlStubFilter = function (url) {
        var result = url;
        var urlObj = URL.parse(url);
        if (urlObj.hostname === null && urlObj.port === null) {
            urlObj.hostname = this.stubHostname;
            urlObj.port = this.stubPort;
            urlObj.protocol = this.protocol;
            urlObj.slashes = true;
            urlObj.pathname = '/stub' + urlObj.pathname;
            result = URL.format(urlObj);
        }
        return result;
    };
    REQUEST.prototype.dataFlag = function (obj, resolve, reject) {
        if (this.dataFlagResolver) {
            this.dataFlagResolver(obj, resolve, reject);
        }
        else {
            if (obj.result_code === 0) {
                resolve(obj.content);
            }
            else {
                reject(obj);
                // throw new Error(`request error: ${url}`);
            }
        }
    };
    return REQUEST;
}());
exports.default = REQUEST;
