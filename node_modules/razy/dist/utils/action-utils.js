/**
 * @fileOverview action creator
 * @author Max
 **/
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var redux_actions_1 = require("redux-actions");
var cloneDeep = require("lodash.clonedeep");
var merge = require("lodash.merge");
/**
 * enhance `redux-actions createAction` by adding a param `asyncCreator`,
 * work with `redux-validator redux-thunk redux-promise` middleware,
 * allow async promise to be created after validation
 */
function createAction(actionType, payloadCreator, metaCreator, asyncCreator) {
    return function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var oriFSA = redux_actions_1.createAction(actionType, payloadCreator, metaCreator).apply(void 0, args);
        if (asyncCreator) {
            if (oriFSA.payload === undefined) {
                oriFSA.payload = {};
            }
            else if (typeof oriFSA.payload !== 'object') {
                oriFSA.payload = { payload: oriFSA.payload };
            }
            if (typeof oriFSA.meta !== 'object' && oriFSA.meta !== undefined) {
                oriFSA.meta = { meta: oriFSA.meta };
            }
            var oriPayload_1 = cloneDeep(oriFSA.payload);
            oriFSA.payload.thunk = function (dispatch) {
                var asyncPayload = asyncCreator.apply(void 0, args);
                dispatch({
                    type: actionType,
                    payload: asyncPayload,
                    meta: merge(oriPayload_1, oriFSA.meta, { disableValidate: true })
                });
                return asyncPayload;
            };
        }
        return oriFSA;
    };
}
exports.createAction = createAction;
