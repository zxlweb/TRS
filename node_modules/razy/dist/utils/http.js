/**
 * @fileOverview server-side http request, yield promise
 * @author Max
 */
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var http = require("http");
var https = require("https");
var querystring = require("querystring");
var request_1 = require("./request");
var URL = require("url");
var HTTP_PARENT = (function (_super) {
    __extends(HTTP_PARENT, _super);
    function HTTP_PARENT(params, protocol, method, dataFlagResolver) {
        var _this = _super.call(this, params, protocol, dataFlagResolver) || this;
        _this.protocol = protocol;
        _this.method = method;
        return _this;
    }
    HTTP_PARENT.prototype.getPromise = function (url, raw) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            console.log("new " + _this.protocol.toUpperCase() + " GET:", url);
            _this.method.get(url, function (res) {
                _this.dataHandler(url, res, resolve, reject, raw);
            }).on('error', reject);
        });
    };
    HTTP_PARENT.prototype.postPromise = function (url, content, options, raw) {
        var _this = this;
        var _content = querystring.stringify(content);
        var urlObj = URL.parse(url);
        var optionsReal = options || {};
        var _options = {
            method: 'POST',
            headers: {
                'Content-Type': optionsReal['Content-Type'] || 'application/x-www-form-urlencoded',
                'Content-Length': _content.length
            },
            hostname: urlObj.hostname,
            port: urlObj.port,
            path: urlObj.path
        };
        return new Promise(function (resolve, reject) {
            console.log("new " + _this.protocol.toUpperCase() + " POST:", url);
            var req = _this.method.request(_options, function (res) {
                _this.dataHandler(url, res, resolve, reject, raw);
            });
            req.on('error', reject);
            req.write(_content);
            req.end();
        });
    };
    HTTP_PARENT.prototype.dataHandler = function (url, res, resolve, reject, raw) {
        var _this = this;
        res.setEncoding('utf8');
        var body = '';
        res.on('data', function (chunk) {
            body += chunk;
        });
        res.on('end', function () {
            var json;
            if (!raw) {
                try {
                    json = JSON.parse(body);
                }
                catch (e) {
                    console.error(body);
                    reject(e);
                    return;
                }
            }
            else {
                json = body;
            }
            if (!raw) {
                _this.dataFlag(json, resolve, reject);
            }
            else {
                resolve(json);
            }
        });
        res.on('error', reject);
    };
    return HTTP_PARENT;
}(request_1.default));
exports.HTTP_PARENT = HTTP_PARENT;
var HTTP = (function (_super) {
    __extends(HTTP, _super);
    function HTTP(params, dataFlagResolver) {
        var _this = _super.call(this, params, 'http', http, dataFlagResolver) || this;
        http.get;
        return _this;
    }
    return HTTP;
}(HTTP_PARENT));
exports.HTTP = HTTP;
var HTTPS = (function (_super) {
    __extends(HTTPS, _super);
    function HTTPS(params, dataFlagResolver) {
        return _super.call(this, params, 'https', https, dataFlagResolver) || this;
    }
    return HTTPS;
}(HTTP_PARENT));
exports.HTTPS = HTTPS;
var _http, _https;
exports.initHTTP = function (params, dataFlagResolver) {
    _http = new HTTP(params, dataFlagResolver);
    return _http;
};
exports.initHTTPS = function (params, dataFlagResolver) {
    _https = new HTTPS(params, dataFlagResolver);
    return _https;
};
