export interface DataFlagResolver {
    (obj: any, resolve: Function, reject: Function): void;
}
export interface RequestParam {
    hostname: string;
    port: string;
    stubHostname: string;
    stubPort: string;
}
declare abstract class REQUEST {
    protected hostname: string;
    protected port: string;
    protected stubHostname: string;
    protected stubPort: string;
    protected protocol: string;
    protected params: any;
    private dataFlagResolver;
    constructor(param: RequestParam, protocol: string, dataFlagResolver?: DataFlagResolver);
    protected abstract getPromise(url: string, raw?: boolean): Promise<any>;
    protected abstract postPromise(url: string, content: any, options?: any, raw?: boolean): Promise<any>;
    get(url: string, raw: boolean): Promise<any>;
    getStub(url: string): Promise<any>;
    post(url: string, content: any, options: any, raw: boolean): Promise<any>;
    postStub(url: string, content: any): Promise<any>;
    setParam(key: string, value: any): void;
    private urlFilter(url);
    private urlStubFilter(url);
    protected dataFlag(obj: any, resolve: Function, reject: Function): void;
}
export default REQUEST;
