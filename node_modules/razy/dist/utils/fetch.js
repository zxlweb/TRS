/**
 * @fileOverview client-side fetch request depending on fetch-ie8
 * @author Max
 **/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var request_1 = require("./request");
var querystring = require("query-string");
var _ajax;
var Fetch = (function (_super) {
    __extends(Fetch, _super);
    function Fetch(params, dataFlagResolver) {
        var _this = _super.call(this, params, 'http', dataFlagResolver) || this;
        var fetchPolyfill = require('fetch-ie8');
        _this.fetch = window.fetch || fetchPolyfill;
        return _this;
    }
    Fetch.prototype.getPromise = function (url, raw) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.fetch.call(window, url)
                .then(function (response) {
                return raw ? response.text() : response.json();
            })
                .then(function (data) {
                _this._handleData(url, data, resolve, reject, raw);
            }).catch(function (e) {
                console.error(e);
                reject(e);
            });
        });
    };
    Fetch.prototype.postPromise = function (url, content, options, raw) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.fetch.call(window, url, {
                method: 'POST',
                headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/x-www-form-urlencoded'
                },
                body: querystring.stringify(content)
            })
                .then(function (response) {
                return raw ? response.text() : response.json();
            })
                .then(function (data) {
                _this._handleData(url, data, resolve, reject, raw);
            }).catch(function (e) {
                console.error(e);
                reject(e);
            });
        });
    };
    Fetch.prototype._handleData = function (url, data, resolve, reject, raw) {
        if (!raw) {
            this.dataFlag(data, resolve, reject);
        }
        else {
            resolve(data);
        }
    };
    return Fetch;
}(request_1.default));
exports.Fetch = Fetch;
exports.initFetch = function (params, dataFlagResolver) {
    _ajax = new Fetch(params, dataFlagResolver);
    return _ajax;
};
