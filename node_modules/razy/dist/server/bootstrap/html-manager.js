/**
 * @fileOverview produce html content and manipulate specific tag
 * @isomorphic
 * @author Max
 */
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var cloneDeep = require("lodash.clonedeep");
var remove = require("lodash.remove");
var findIndex = require("lodash.findindex");
var reduce = require("lodash.reduce");
var TAG_TYPE;
(function (TAG_TYPE) {
    TAG_TYPE[TAG_TYPE["SCRIPT"] = 0] = "SCRIPT";
    TAG_TYPE[TAG_TYPE["STYLE"] = 1] = "STYLE";
    TAG_TYPE[TAG_TYPE["META"] = 2] = "META";
})(TAG_TYPE = exports.TAG_TYPE || (exports.TAG_TYPE = {}));
;
var HTMLManager = (function () {
    function HTMLManager() {
        this.head = [];
        this.foot = [];
        this.CDNFailSafe = [];
        this.TAG_TYPE = TAG_TYPE;
        this.convertObjToArray = function (objToConvert) {
            var obj = cloneDeep(objToConvert);
            var result = [];
            for (var i in obj) {
                result.push({
                    key: i,
                    value: obj[i]
                });
            }
            return result;
        };
        if (typeof window === 'undefined') {
            var _a = require('./html-default'), HEAD = _a.HEAD, FOOT = _a.FOOT, CDN_FAIL_SAFE = _a.CDN_FAIL_SAFE;
            this.head = this.convertObjToArray(HEAD);
            this.foot = this.convertObjToArray(FOOT);
            this.CDNFailSafe = this.convertObjToArray(CDN_FAIL_SAFE);
            this.prependTagBefore('entry', 'CDNFailSafe', {
                content: this.getCDNFailSafeSentence()
            }, TAG_TYPE.SCRIPT);
        }
    }
    HTMLManager.prototype.addCDNFailSafe = function (globalVar, path) {
        if (typeof window !== 'undefined')
            return;
        this.CDNFailSafe.push({
            key: globalVar,
            value: path
        });
        this.removeTag('CDNFailSafe');
        this.prependTagBefore('entry', 'CDNFailSafe', {
            content: this.getCDNFailSafeSentence()
        }, TAG_TYPE.SCRIPT);
    };
    HTMLManager.prototype.getHead = function () {
        if (typeof window !== 'undefined')
            return;
        var result = reduce(this.head, function (sum, item) {
            return sum + item.value;
        }, '');
        return result;
    };
    HTMLManager.prototype.getFoot = function () {
        if (typeof window !== 'undefined')
            return;
        var result = reduce(this.foot, function (sum, item) {
            return sum + item.value;
        }, '');
        return result;
    };
    HTMLManager.prototype.removeTag = function (key) {
        if (typeof window !== 'undefined')
            return;
        remove(this.head, function (item) {
            return item.key === key;
        });
        remove(this.foot, function (item) {
            return item.key === key;
        });
    };
    HTMLManager.prototype.setTag = function (key, value) {
        if (typeof window !== 'undefined')
            return;
        var index = this.findIndex(key);
        var obj = this.head[index] || this.foot[index - this.head.length];
        if (obj !== undefined) {
            obj.value = value;
        }
    };
    HTMLManager.prototype.getTag = function (key) {
        if (typeof window !== 'undefined')
            return;
        var index = this.findIndex(key);
        var obj = this.head[index] || this.foot[index - this.head.length];
        var result = obj !== undefined ? obj.value : undefined;
        return result;
    };
    HTMLManager.prototype.injectGlobalVar = function (obj) {
        if (typeof window !== 'undefined')
            return;
        var index = this.findIndex('headTagOpen');
        var tag = '<script type="text/javascript">\n';
        for (var i in obj) {
            if (typeof obj[i] === 'string') {
                tag += "var " + i + " = '" + obj[i] + "';\n";
            }
            else {
                tag += "var " + i + " = " + obj[i] + ";\n";
            }
        }
        tag += '</script>';
        this.head.splice(index + 1, 0, {
            key: 'globalVar',
            value: tag
        });
    };
    HTMLManager.prototype.appendTagAfter = function (key, tagKey, valueObj, tagType) {
        if (typeof window !== 'undefined')
            return;
        var index = this.keyCheck(key, tagKey);
        var tag = this.generateTag(valueObj, tagType);
        if (index < this.head.length) {
            this.head.splice(index + 1, 0, {
                key: tagKey,
                value: tag
            });
        }
        else {
            this.foot.splice(index - this.head.length + 1, 0, {
                key: tagKey,
                value: tag
            });
        }
    };
    HTMLManager.prototype.prependTagBefore = function (key, tagKey, valueObj, tagType) {
        if (typeof window !== 'undefined')
            return;
        var index = this.keyCheck(key, tagKey);
        var tag = this.generateTag(valueObj, tagType);
        if (index < this.head.length) {
            this.head.splice(index, 0, {
                key: tagKey,
                value: tag
            });
        }
        else {
            this.foot.splice(index - this.head.length, 0, {
                key: tagKey,
                value: tag
            });
        }
    };
    HTMLManager.prototype.generateTag = function (valueObj, tagType) {
        var tag;
        switch (tagType) {
            case TAG_TYPE.SCRIPT:
                if (valueObj.src) {
                    tag = "<script type=\"text/javascript\" src=\"" + valueObj.src + "\"></script>";
                }
                else {
                    tag = "<script type=\"text/javascript\">" + valueObj.content + "</script>";
                }
                break;
            case TAG_TYPE.STYLE:
                tag = "<link rel=\"stylesheet\" href=\"" + valueObj.href + "\" >";
                break;
            case TAG_TYPE.META:
                tag = '<meta ';
                for (var i in valueObj) {
                    tag += i + "=\"" + valueObj[i] + "\" ";
                }
                tag += '>';
                break;
            default:
                throw new Error('undefined TAG_TYPE');
        }
        return tag;
    };
    HTMLManager.prototype.keyCheck = function (key, tagKey) {
        var index = this.findIndex(key);
        var indexDuplicated = this.findIndex(tagKey);
        if (indexDuplicated !== -1) {
            throw new Error('cannot insert a duplicate key');
        }
        if (index === -1) {
            throw new Error('did not find an existing key');
        }
        return index;
    };
    HTMLManager.prototype.findIndex = function (key) {
        var allWrap = this.head.concat(this.foot);
        var index = findIndex(allWrap, function (item) {
            return item.key === key;
        });
        return index;
    };
    HTMLManager.prototype.getCDNFailSafeSentence = function () {
        var CDNFailSafeSentences = reduce(this.CDNFailSafe, function (sum, item) {
            return sum + ("if(typeof " + item.key + " === \"undefined\"){document.write(unescape('%3Cscript src=\"" + item.value + "\"%3E%3C/script%3E'));}\n");
        }, '');
        return CDNFailSafeSentences;
    };
    return HTMLManager;
}());
exports.default = HTMLManager;
