/**
 * @fileOverview redux validator middleware
 * @author Max
 **/

export default function(options) {
    const validatorMiddleware = store => next => action => {
        if(!action[options.validatorKey] || !action[options.validatorKey].validator) {
            // thunk compatible
            if(action[options.paramKey] && action[options.paramKey].thunk) {
                return next(action[options.paramKey].thunk);
            } else {
                return next(action);
            }
        }

        let flag = true;
        let errorParam, errorId, errorMsg;

        let validators = action[options.validatorKey].validator || {};

        const runValidator = (param, func, msg, id, key) => {
            let flag;
            if(func) {
                flag = func(param, store.getState(), action.payload);
            } else {
                throw new Error('validator func is needed');
            }
            if(typeof flag !== 'boolean') {
                throw new Error('validator func must return boolean type');
            }
            if(!flag) {
                errorParam = key;
                errorId = id;
                errorMsg = msg || '';
            }

            return flag;
        };

        const runValidatorContainer = (validator, param, key) => {
            let flag;
            if(Array.prototype.isPrototypeOf(validator)) {
                for(let j in validator) {
                    let item = validator[j];
                    flag = runValidator(param, item.func, item.msg, j, key);
                    if(!flag) break;
                }
            } else {
                flag = runValidator(param, validator.func, validator.msg, 0, key);
            }
            return flag;
        };

        const params = action[options.paramKey] || {};
        for(let i in validators) {
            if(i === options.paramKey || i === 'thunk') continue;
            let validator = validators[i];

            flag = runValidatorContainer(validator, params[i], i);
            if(!flag) break;
        }

        // param object itself
        const paramObjValidator = validators[options.paramKey];
        if(paramObjValidator && flag) {
            flag = runValidatorContainer(paramObjValidator, action[options.paramKey], options.paramKey);
        }
        // -------

        if(flag) {
            // thunk compatible
            if(action[options.paramKey] && action[options.paramKey].thunk) {
                return next(action[options.paramKey].thunk);
            } else {
                return next(action);
            }
        } else {
            return {
                err: 'validator',
                msg: errorMsg,
                param: errorParam,
                id: errorId
            };
        }
    };

    return validatorMiddleware;
}
